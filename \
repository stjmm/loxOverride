#include <string.h>

#include "table.h"
#include "object.h"
#include "memory.h"
#include "value.h"

#define TABLE_MAX_LOAD 0.75

void init_table(table_t *table)
{
    table->count = 0;
    table->capacity = 0;
    table->entries = NULL;
}

void free_table(table_t *table)
{
    FREE_ARRAY(entry_t, table->entries, table->capacity);
    init_table(table);
}

static uint32_t fnv_hash(const void *data, size_t length)
{
    uint32_t hash = 2166136261u;
    const uint8_t *bytes = (const uint8_t*)data;
    for (size_t i = 0; i < length; i++) {
        hash ^= bytes[i];
        hash *= 16777619;
    }
    return hash;
}

static uint32_t hash_value(value_t value)
{
    if (IS_NIL(value)) {
        return fnv_hash("nil", 3);
    }
    if (IS_BOOL(value)) {
        return fnv_hash(AS_BOOL(value) ? "true" : "false",
                        AS_BOOL(value) ? 4 : 5);
    }
    if (IS_NUMBER(value)) {
        double num = AS_NUMBER(value);
        return fnv_hash(&num, sizeof(double));
    }
    if (IS_OBJ(value)) {
        obj_t *obj = AS_OBJ(value);
        if (obj->type == OBJ_STRING) {
            return ((obj_string_t*)obj)->hash;
        }
        // Hash obj_t pointer in other cases
        return fnv_hash(&obj, sizeof(obj_t*));
    }

    return -1;
}

static entry_t *find_entry(entry_t *entries, int capacity, value_t key)
{
    uint32_t index = hash_value(key) & (capacity - 1);
    entry_t *tombstone = NULL;
    for (;;) {
        entry_t *entry = &entries[index];
        if (IS_NIL(entry->key)) {
            if (IS_NIL(entry->value)) {
                // Empty entry, if tombstone seen before return in to reuse it.
                return tombstone != NULL ? tombstone : entry;
            } else {
                // Tombstone found, keep searching
                if (tombstone == NULL) tombstone = entry;
            }
        } else if (values_equal(entry->key, key)) {
            return entry;
        }

        index = (index + 1) & (capacity - 1);
    }
}

static void adjust_capacity(table_t *table, int capacity)
{
    entry_t *entries = ALLOCATE(entry_t, capacity);
    for (int i = 0; i < capacity; i++) {
        entries[i].key = NIL_VAL;
        entries[i].value = NIL_VAL;
    }

    table->count = 0;
    for (int i = 0; i < table->capacity; i++) {
        entry_t *entry = &table->entries[i];
        if (IS_NIL(entry->key)) continue;

        entry_t *dest = find_entry(entries, capacity, entry->key);
        dest->key = entry->key;
        dest->value = entry->value;
        table->count++;
    }

    FREE_ARRAY(entry_t, table->entries, table->capacity);
    table->entries = entries;
    table->capacity = capacity;
}

bool table_set(table_t *table, value_t key, value_t value)
{
    if (table->count + 1 > table->capacity * TABLE_MAX_LOAD) {
        int capacity = GROW_CAPACITY(table->capacity);
        adjust_capacity(table, capacity);
    }
    entry_t *entry = find_entry(table->entries, table->capacity, key);
    bool is_new_key = IS_NIL(entry->key);
    if (is_new_key && IS_NIL(entry->value)) table->count++;

    entry->key = key;
    entry->value = value;
    return is_new_key;
}

bool table_get(table_t *table, value_t key, value_t *value)
{
    if (table->count == 0) return false;

    entry_t *entry = find_entry(table->entries, table->capacity, key);
    if (IS_NIL(entry->key)) return false;

    *value = entry->value;
    return true;
}

bool table_delete(table_t *table, value_t key)
{
    if (table->count == 0) return false;

    entry_t *entry = find_entry(table->entries, table->capacity, key);
    if (IS_NIL(entry->key)) return false;

    // tombstone entry: NULL, BOOL_VAL(true)
    entry->key = NIL_VAL;
    entry->value = BOOL_VAL(true);
    return true;
}

void table_add_all(table_t *from, table_t *to)
{
    for (int i = 0; i < from->capacity; i++) {
        entry_t *entry = &from->entries[i];
        if (!IS_NIL(entry->key)) {
            table_set(to, entry->key, entry->value);
        }
    }
}

obj_string_t *table_find_string(table_t *table, const char *chars, int length, uint32_t hash)
{
    if (table->count == 0) return NULL;

    uint32_t index = hash & (table->capacity - 1);
    for (;;) {
        entry_t *entry = &table->entries[index];
        if (entry->key == NULL) {
            if (IS_NIL(entry->value)) return NULL;
        } else if (entry->key->length == length &&
                   entry->key->hash == hash &&
                   memcmp(entry->key->chars, chars, length) == 0) {
            return entry->key;
        }

        index = (index + 1) & (table->capacity - 1);
    }
}

void mark_table(table_t *table)
{
    for (int i = 0; i < table->capacity; i++) {
        entry_t *entry = &table->entries[i];
        mark_value(entry->key);
        mark_value(entry->value);
    }
}

void table_remove_white(table_t *table)
{
    for (int i = 0; i < table->capacity; i++) {
        entry_t *entry = &table->entries[i];
        if (entry->key != NULL && !entry->key->obj.is_marked) {
            table_delete(table, entry->key);
        }
    }
}
